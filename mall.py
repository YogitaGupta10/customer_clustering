# -*- coding: utf-8 -*-
"""mall.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BBEeVANzFhfHbNrWmA_94ddr2uMs-5ai
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df= pd.read_csv('/content/Mall_Customers.csv')

df.head()

df.info()

df.describe()

df.dtypes

sns.heatmap(df.corr())

df.isnull().sum()

df.eq(0).sum()

df.duplicated().sum()

sns.countplot(data=df, x='Age') #binning of age groups using .cut() can be done.
plt.xticks(rotation=90)
plt.show()

df.nunique()

sns.countplot(data=df, x='Genre') #distribution of the genre to check the count of the male and female.

sns.histplot(df['Age'], kde=True) # to see the distribution of the age in the dataset. so that if its too skewed, then can be normalised.

sns.histplot(df['Annual Income (k$)'], kde=True) #to see the distribution of the annual income in the dataset.

sns.histplot(df['Spending Score (1-100)'], kde=True) #to see the distribution of the spending score in the dataset.

#to check if there is any relation between the two.
sns.scatterplot(data=df, x='Annual Income (k$)', y='Spending Score (1-100)')
plt.title('Relationship between Annual Income and Spending Score')
plt.show()

#the above diagram clearly shows the distribution has a relation among these two parameters and form somewhat 5 clusters.

sns.scatterplot(x='Genre', y = 'Spending Score (1-100)', data = df) #checking any other relations in the dataset.

sns.boxplot( x= 'Genre', y = 'Annual Income (k$)', data = df ) # checking for outliers.

# since there is just one outlier, it might not be affect the dataset if its not removed.

from sklearn.cluster import KMeans

x=df.iloc[:,[3,4]].values #finding the clusters on the basis of annual income
inertias = []

for i in range(1,11):
    kmeans = KMeans(n_clusters=i)
    kmeans.fit(x)
    inertias.append(kmeans.inertia_)

plt.plot(range(1,11), inertias, marker='o')
plt.title('Elbow method')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()

kmeans_model = KMeans(5,init='k-means++', random_state=0)
km=kmeans_model.fit_predict(x)

#creating the clusters diagrams.

plt.scatter(x[km == 0, 0], x[km == 0, 1], s = 100, c = 'red', label = 'Cluster 1')
plt.scatter(x[km == 1, 0], x[km == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')
plt.scatter(x[km == 2, 0], x[km == 2, 1], s = 100, c = 'green', label = 'Cluster 3')
plt.scatter(x[km == 3, 0], x[km == 3, 1], s = 100, c = 'maroon', label = 'Cluster 4')
plt.scatter(x[km == 4, 0], x[km == 4, 1], s = 100, c = 'pink', label = 'Cluster 5')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')
plt.title('Clusters of customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()

#understanding the clusters.

"""Cluster 1: High annual income with Low spending score

Cluster 2: Avg income with Avg spending score

Cluster 3: High Annual income with High spending score

Cluster 4: Low Annual Income with High spending score

Cluster 5: Low Annual Income with Low spending score.
"""

